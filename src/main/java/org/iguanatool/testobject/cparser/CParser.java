/* Generated By:JJTree&JavaCC: Do not edit this line. CParser.java */
package org.iguanatool.testobject.cparser;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.*;

public class CParser/*@bgen(jjtree)*/ implements CParserTreeConstants, CParserConstants {/*@bgen(jjtree)*/
    // Set for storing typedef types
    private static Set<String> types = new HashSet<String>();
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;
    static private int[] jj_la1_3;

    // hack to add special types
    static {
        types.add("__signed__");
        types.add("__const");
        types.add("__inline__");
        types.add("__signed");
        types.add("FILE");
    }

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
        jj_la1_init_3();
    }

    final private int[] jj_la1 = new int[75];
    final private JJCalls[] jj_2_rtns = new JJCalls[34];
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    /**
     * Generated Token Manager.
     */
    public CParserTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    protected JJTCParserState jjtree = new JJTCParserState();
    SimpleCharStream jj_input_stream;
    // Stack for determining when the parser
    // is parsing a typdef definition.
    private Deque<Boolean> typedefParsingStack = new ArrayDeque<Boolean>();
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /**
     * Whether we are looking ahead.
     */
    private boolean jj_lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    private boolean jj_rescan = false;
    private int jj_gc = 0;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    public CParser(String fileName) throws IOException {
        this(new File(fileName));
    }

    public CParser(File file) throws IOException {
        this(new FileInputStream(file), null);
    }

    /**
     * Constructor with InputStream.
     */
    public CParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public CParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new CParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 75; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public CParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new CParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 75; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public CParser(CParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 75; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    // Returns the types used in parsing the c source
    public static Set<String> getTypes() {
        return Collections.unmodifiableSet(types);
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x0, 0x41400000, 0x200000, 0x41400000, 0x84800000, 0x200000, 0x0, 0x0, 0x80000000, 0x0, 0x0, 0x200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80d1000, 0x0, 0x0, 0x0, 0x200000, 0x0, 0x200000, 0x0, 0x0, 0x0, 0x0, 0x80d1000, 0x0, 0x0, 0x0, 0x80d1000, 0x0, 0x0, 0x80d1000, 0x0, 0x3a1d1000, 0x80d1000, 0x3a1d1000, 0x3a1d1000, 0x80d1000, 0x80d1000, 0x80d1000, 0x80d1000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80d1000, 0x0, 0x8000000, 0x0, 0x0, 0x0, 0xd1000, 0x0, 0xd1000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x20100000, 0x1001, 0x20, 0x1001, 0x26cd2, 0x20, 0x100000, 0x100000, 0x10, 0x4000000, 0x8000000, 0x20, 0x4000000, 0x20100000, 0x30100000, 0x100000, 0x100000, 0x4000000, 0x8000000, 0x0, 0x20100000, 0xa0000000, 0x20100000, 0x100000, 0x80000000, 0x20000000, 0x20, 0x0, 0x20, 0x4000000, 0xa0000000, 0x4000000, 0x4000000, 0x21100000, 0xa0000000, 0x0, 0xa0000000, 0x20100000, 0xa0000000, 0xa0000000, 0x20100000, 0xa0000000, 0x219d820c, 0x20100000, 0x219d820c, 0x219d820c, 0x20100000, 0x20100000, 0x20100000, 0x20100000, 0x4000000, 0x8000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20100000, 0x20000000, 0x0, 0x0, 0xa0000000, 0xa0000000, 0x20100000, 0x4000000, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x98040002, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x2, 0x0, 0x0, 0x98040002, 0x2, 0x2, 0x2, 0x98040002, 0x0, 0x0, 0x98040002, 0x0, 0x98040002, 0x98040002, 0x98040002, 0x98040002, 0x98040002, 0x98040002, 0x98040002, 0x98040002, 0x0, 0x1ff8, 0x2000, 0x4000, 0x8000, 0x10000, 0x20000, 0x40000, 0x1f80000, 0x1f80000, 0x6000000, 0x6000000, 0x18000000, 0x18000000, 0x60000002, 0x60000002, 0x98040002, 0x0, 0x98040002, 0x18040002, 0x80000000, 0x80000000, 0x0, 0x0, 0x0,};
    }

    private static void jj_la1_init_3() {
        jj_la1_3 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x7, 0x0, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x0, 0x7, 0x2, 0x19, 0x19, 0x0, 0x0, 0x0,};
    }

    // Returns true if the given string is
    // a typedef type.
    private boolean isType(String type) {
        return types.contains(type);
    }

    // Add a typedef type to those already defined
    private void addType(String type) {
        types.add(type);
    }

    final public ASTParseUnit ParseUnit() throws ParseException {
                            /*@bgen(jjtree) ParseUnit */
        ASTParseUnit jjtn000 = new ASTParseUnit(JJTPARSEUNIT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_1:
            while (true) {
                ExternalDeclaration();
                if (jj_2_1(1)) {
                    ;
                } else {
                    break label_1;
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));

        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
        return jjtn000;
    }

    final public void ExternalDeclaration() throws ParseException {
                              /*@bgen(jjtree) ExternalDeclaration */
        ASTExternalDeclaration jjtn000 = new ASTExternalDeclaration(JJTEXTERNALDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_2(2147483647)) {
                FunctionDefinition();
            } else if (jj_2_3(1)) {
                Declaration();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void FunctionDefinition() throws ParseException {
                             /*@bgen(jjtree) FunctionDefinition */
        ASTFunctionDefinition jjtn000 = new ASTFunctionDefinition(JJTFUNCTIONDEFINITION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_4(2147483647)) {
                DeclarationSpecifiers();
            } else {
                ;
            }
            Declarator();
            if (jj_2_5(1)) {
                DeclarationList();
            } else {
                ;
            }
            CompoundStatement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Declaration() throws ParseException {
                      /*@bgen(jjtree) Declaration */
        ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            DeclarationSpecifiers();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFIER:
                case 61:
                case 65:
                    InitDeclaratorList();
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    ;
            }
            jj_consume_token(55);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DeclarationList() throws ParseException {
                          /*@bgen(jjtree) DeclarationList */
        ASTDeclarationList jjtn000 = new ASTDeclarationList(JJTDECLARATIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_2:
            while (true) {
                Declaration();
                if (jj_2_6(2147483647)) {
                    ;
                } else {
                    break label_2;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DeclarationSpecifiers() throws ParseException {
                                /*@bgen(jjtree) DeclarationSpecifiers */
        ASTDeclarationSpecifiers jjtn000 = new ASTDeclarationSpecifiers(JJTDECLARATIONSPECIFIERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case REGISTER:
                case TYPEDEF:
                case EXTERN:
                case STATIC:
                case AUTO:
                    StorageClassSpecifier();
                    if (jj_2_7(2147483647)) {
                        DeclarationSpecifiers();
                    } else {
                        ;
                    }
                    break;
                default:
                    jj_la1[1] = jj_gen;
                    if (jj_2_10(1)) {
                        TypeSpecifier();
                        if (jj_2_8(2147483647)) {
                            DeclarationSpecifiers();
                        } else {
                            ;
                        }
                    } else {
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case VOLATILE:
                            case CONST:
                                TypeQualifier();
                                if (jj_2_9(2147483647)) {
                                    DeclarationSpecifiers();
                                } else {
                                    ;
                                }
                                break;
                            default:
                                jj_la1[2] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StorageClassSpecifier() throws ParseException {
                                /*@bgen(jjtree) StorageClassSpecifier */
        ASTStorageClassSpecifier jjtn000 = new ASTStorageClassSpecifier(JJTSTORAGECLASSSPECIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AUTO:
                    jj_consume_token(AUTO);
                    break;
                case REGISTER:
                    jj_consume_token(REGISTER);
                    break;
                case STATIC:
                    jj_consume_token(STATIC);
                    break;
                case EXTERN:
                    jj_consume_token(EXTERN);
                    break;
                case TYPEDEF:
                    jj_consume_token(TYPEDEF);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    jjtn000.jjtSetLastToken(getToken(0));
                    typedefParsingStack.addFirst(Boolean.TRUE);
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeSpecifier() throws ParseException {
                        /*@bgen(jjtree) TypeSpecifier */
        ASTTypeSpecifier jjtn000 = new ASTTypeSpecifier(JJTTYPESPECIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VOID:
                    jj_consume_token(VOID);
                    break;
                case CHAR:
                    jj_consume_token(CHAR);
                    break;
                case SHORT:
                    jj_consume_token(SHORT);
                    break;
                case INT:
                    jj_consume_token(INT);
                    break;
                case LONG:
                    jj_consume_token(LONG);
                    break;
                case FLOAT:
                    jj_consume_token(FLOAT);
                    break;
                case DOUBLE:
                    jj_consume_token(DOUBLE);
                    break;
                case SIGNED:
                    jj_consume_token(SIGNED);
                    break;
                case UNSIGNED:
                    jj_consume_token(UNSIGNED);
                    break;
                case STRUCT:
                case UNION:
                    StructOrUnionSpecifier();
                    break;
                case ENUM:
                    EnumSpecifier();
                    break;
                default:
                    jj_la1[4] = jj_gen;
                    if (isType(getToken(1).image)) {
                        TypedefName();
                    } else {
                        jj_consume_token(-1);
                        throw new ParseException();
                    }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeQualifier() throws ParseException {
                        /*@bgen(jjtree) TypeQualifier */
        ASTTypeQualifier jjtn000 = new ASTTypeQualifier(JJTTYPEQUALIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case CONST:
                    jj_consume_token(CONST);
                    break;
                case VOLATILE:
                    jj_consume_token(VOLATILE);
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StructOrUnionSpecifier() throws ParseException {
                                 /*@bgen(jjtree) StructOrUnionSpecifier */
        ASTStructOrUnionSpecifier jjtn000 = new ASTStructOrUnionSpecifier(JJTSTRUCTORUNIONSPECIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            typedefParsingStack.addFirst(Boolean.FALSE);
            StructOrUnion();
            if (jj_2_11(3)) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                        jj_consume_token(IDENTIFIER);
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        ;
                }
                jj_consume_token(56);
                StructDeclarationList();
                jj_consume_token(57);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                        jj_consume_token(IDENTIFIER);
                        break;
                    default:
                        jj_la1[7] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            typedefParsingStack.removeFirst();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StructOrUnion() throws ParseException {
                        /*@bgen(jjtree) StructOrUnion */
        ASTStructOrUnion jjtn000 = new ASTStructOrUnion(JJTSTRUCTORUNION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case STRUCT:
                    jj_consume_token(STRUCT);
                    break;
                case UNION:
                    jj_consume_token(UNION);
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StructDeclarationList() throws ParseException {
                                /*@bgen(jjtree) StructDeclarationList */
        ASTStructDeclarationList jjtn000 = new ASTStructDeclarationList(JJTSTRUCTDECLARATIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_3:
            while (true) {
                StructDeclaration();
                if (jj_2_12(1)) {
                    ;
                } else {
                    break label_3;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void InitDeclaratorList() throws ParseException {
                             /*@bgen(jjtree) InitDeclaratorList */
        ASTInitDeclaratorList jjtn000 = new ASTInitDeclaratorList(JJTINITDECLARATORLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            InitDeclarator();
            label_4:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        ;
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        break label_4;
                }
                jj_consume_token(58);
                InitDeclarator();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
            // Finished with a typedefDeclaration??
            if (!(typedefParsingStack.size() == 0) && ((Boolean) typedefParsingStack.peekFirst()).booleanValue()) {
                typedefParsingStack.removeFirst();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void InitDeclarator() throws ParseException {
                         /*@bgen(jjtree) InitDeclarator */
        ASTInitDeclarator jjtn000 = new ASTInitDeclarator(JJTINITDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Declarator();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 59:
                    jj_consume_token(59);
                    Initializer();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StructDeclaration() throws ParseException {
                            /*@bgen(jjtree) StructDeclaration */
        ASTStructDeclaration jjtn000 = new ASTStructDeclaration(JJTSTRUCTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            SpecifierQualifierList();
            StructDeclaratorList();
            jj_consume_token(55);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SpecifierQualifierList() throws ParseException {
                                 /*@bgen(jjtree) SpecifierQualifierList */
        ASTSpecifierQualifierList jjtn000 = new ASTSpecifierQualifierList(JJTSPECIFIERQUALIFIERLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_15(1)) {
                TypeSpecifier();
                if (jj_2_13(2147483647)) {
                    SpecifierQualifierList();
                } else {
                    ;
                }
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case VOLATILE:
                    case CONST:
                        TypeQualifier();
                        if (jj_2_14(2147483647)) {
                            SpecifierQualifierList();
                        } else {
                            ;
                        }
                        break;
                    default:
                        jj_la1[11] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StructDeclaratorList() throws ParseException {
                               /*@bgen(jjtree) StructDeclaratorList */
        ASTStructDeclaratorList jjtn000 = new ASTStructDeclaratorList(JJTSTRUCTDECLARATORLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            StructDeclarator();
            label_5:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        ;
                        break;
                    default:
                        jj_la1[12] = jj_gen;
                        break label_5;
                }
                jj_consume_token(58);
                StructDeclarator();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StructDeclarator() throws ParseException {
                           /*@bgen(jjtree) StructDeclarator */
        ASTStructDeclarator jjtn000 = new ASTStructDeclarator(JJTSTRUCTDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_16(3)) {
                Declarator();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                    case 60:
                    case 61:
                    case 65:
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case IDENTIFIER:
                            case 61:
                            case 65:
                                Declarator();
                                break;
                            default:
                                jj_la1[13] = jj_gen;
                                ;
                        }
                        jj_consume_token(60);
                        ConstantExpression();
                        break;
                    default:
                        jj_la1[14] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EnumSpecifier() throws ParseException {
                        /*@bgen(jjtree) EnumSpecifier */
        ASTEnumSpecifier jjtn000 = new ASTEnumSpecifier(JJTENUMSPECIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(ENUM);
            if (jj_2_17(3)) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                        jj_consume_token(IDENTIFIER);
                        break;
                    default:
                        jj_la1[15] = jj_gen;
                        ;
                }
                jj_consume_token(56);
                EnumeratorList();
                jj_consume_token(57);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case IDENTIFIER:
                        jj_consume_token(IDENTIFIER);
                        break;
                    default:
                        jj_la1[16] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void EnumeratorList() throws ParseException {
                         /*@bgen(jjtree) EnumeratorList */
        ASTEnumeratorList jjtn000 = new ASTEnumeratorList(JJTENUMERATORLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Enumerator();
            label_6:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        ;
                        break;
                    default:
                        jj_la1[17] = jj_gen;
                        break label_6;
                }
                jj_consume_token(58);
                Enumerator();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Enumerator() throws ParseException {
                     /*@bgen(jjtree) Enumerator */
        ASTEnumerator jjtn000 = new ASTEnumerator(JJTENUMERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IDENTIFIER);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 59:
                    jj_consume_token(59);
                    ConstantExpression();
                    break;
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Declarator() throws ParseException {
                     /*@bgen(jjtree) Declarator */
        ASTDeclarator jjtn000 = new ASTDeclarator(JJTDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 65:
                    Pointer();
                    break;
                default:
                    jj_la1[19] = jj_gen;
                    ;
            }
            DirectDeclarator();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DirectDeclarator() throws ParseException {
                           /*@bgen(jjtree) DirectDeclarator */
        ASTDirectDeclarator jjtn000 = new ASTDirectDeclarator(JJTDIRECTDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFIER:
                    t = jj_consume_token(IDENTIFIER);
                    if (!(typedefParsingStack.size() == 0) && ((Boolean) typedefParsingStack.peekFirst()).booleanValue()) {
                        addType(t.image);
                    }
                    break;
                case 61:
                    jj_consume_token(61);
                    Declarator();
                    jj_consume_token(62);
                    break;
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            label_7:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 61:
                    case 63:
                        ;
                        break;
                    default:
                        jj_la1[21] = jj_gen;
                        break label_7;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 63:
                        jj_consume_token(63);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case CHARACTER_LITERAL:
                            case STRING_LITERAL:
                            case SIZEOF:
                            case IDENTIFIER:
                            case 61:
                            case 65:
                            case 82:
                            case 91:
                            case 92:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                                ConstantExpression();
                                break;
                            default:
                                jj_la1[22] = jj_gen;
                                ;
                        }
                        jj_consume_token(64);
                        break;
                    default:
                        jj_la1[24] = jj_gen;
                        if (jj_2_18(3)) {
                            jj_consume_token(61);
                            ParameterTypeList();
                            jj_consume_token(62);
                        } else {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case 61:
                                    jj_consume_token(61);
                                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                        case IDENTIFIER:
                                            IdentifierList();
                                            break;
                                        default:
                                            jj_la1[23] = jj_gen;
                                            ;
                                    }
                                    jj_consume_token(62);
                                    break;
                                default:
                                    jj_la1[25] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                        }
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Pointer() throws ParseException {
                  /*@bgen(jjtree) Pointer */
        ASTPointer jjtn000 = new ASTPointer(JJTPOINTER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(65);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VOLATILE:
                case CONST:
                    TypeQualifierList();
                    break;
                default:
                    jj_la1[26] = jj_gen;
                    ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 65:
                    Pointer();
                    break;
                default:
                    jj_la1[27] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeQualifierList() throws ParseException {
                            /*@bgen(jjtree) TypeQualifierList */
        ASTTypeQualifierList jjtn000 = new ASTTypeQualifierList(JJTTYPEQUALIFIERLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_8:
            while (true) {
                TypeQualifier();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case VOLATILE:
                    case CONST:
                        ;
                        break;
                    default:
                        jj_la1[28] = jj_gen;
                        break label_8;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ParameterTypeList() throws ParseException {
                            /*@bgen(jjtree) ParameterTypeList */
        ASTParameterTypeList jjtn000 = new ASTParameterTypeList(JJTPARAMETERTYPELIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ParameterList();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 58:
                    jj_consume_token(58);
                    jj_consume_token(66);
                    break;
                default:
                    jj_la1[29] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ParameterList() throws ParseException {
                        /*@bgen(jjtree) ParameterList */
        ASTParameterList jjtn000 = new ASTParameterList(JJTPARAMETERLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ParameterDeclaration();
            label_9:
            while (true) {
                if (jj_2_19(2)) {
                    ;
                } else {
                    break label_9;
                }
                jj_consume_token(58);
                ParameterDeclaration();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ParameterDeclaration() throws ParseException {
                               /*@bgen(jjtree) ParameterDeclaration */
        ASTParameterDeclaration jjtn000 = new ASTParameterDeclaration(JJTPARAMETERDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            DeclarationSpecifiers();
            if (jj_2_20(2147483647)) {
                Declarator();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 61:
                    case 63:
                    case 65:
                        AbstractDeclarator();
                        break;
                    default:
                        jj_la1[30] = jj_gen;
                        ;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void IdentifierList() throws ParseException {
                         /*@bgen(jjtree) IdentifierList */
        ASTIdentifierList jjtn000 = new ASTIdentifierList(JJTIDENTIFIERLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IDENTIFIER);
            label_10:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        ;
                        break;
                    default:
                        jj_la1[31] = jj_gen;
                        break label_10;
                }
                jj_consume_token(58);
                jj_consume_token(IDENTIFIER);
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Initializer() throws ParseException {
                      /*@bgen(jjtree) Initializer */
        ASTInitializer jjtn000 = new ASTInitializer(JJTINITIALIZER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case SIZEOF:
                case IDENTIFIER:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    AssignmentExpression();
                    break;
                case 56:
                    jj_consume_token(56);
                    InitializerList();
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 58:
                            jj_consume_token(58);
                            break;
                        default:
                            jj_la1[32] = jj_gen;
                            ;
                    }
                    jj_consume_token(57);
                    break;
                default:
                    jj_la1[33] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void InitializerList() throws ParseException {
                          /*@bgen(jjtree) InitializerList */
        ASTInitializerList jjtn000 = new ASTInitializerList(JJTINITIALIZERLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Initializer();
            label_11:
            while (true) {
                if (jj_2_21(2)) {
                    ;
                } else {
                    break label_11;
                }
                jj_consume_token(58);
                Initializer();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypeName() throws ParseException {
                   /*@bgen(jjtree) TypeName */
        ASTTypeName jjtn000 = new ASTTypeName(JJTTYPENAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            SpecifierQualifierList();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 61:
                case 63:
                case 65:
                    AbstractDeclarator();
                    break;
                default:
                    jj_la1[34] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AbstractDeclarator() throws ParseException {
                             /*@bgen(jjtree) AbstractDeclarator */
        ASTAbstractDeclarator jjtn000 = new ASTAbstractDeclarator(JJTABSTRACTDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_22(3)) {
                Pointer();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 61:
                    case 63:
                    case 65:
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case 65:
                                Pointer();
                                break;
                            default:
                                jj_la1[35] = jj_gen;
                                ;
                        }
                        DirectAbstractDeclarator();
                        break;
                    default:
                        jj_la1[36] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DirectAbstractDeclarator() throws ParseException {
                                   /*@bgen(jjtree) DirectAbstractDeclarator */
        ASTDirectAbstractDeclarator jjtn000 = new ASTDirectAbstractDeclarator(JJTDIRECTABSTRACTDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_24(2)) {
                jj_consume_token(61);
                AbstractDeclarator();
                jj_consume_token(62);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 63:
                        jj_consume_token(63);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case CHARACTER_LITERAL:
                            case STRING_LITERAL:
                            case SIZEOF:
                            case IDENTIFIER:
                            case 61:
                            case 65:
                            case 82:
                            case 91:
                            case 92:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                                ConstantExpression();
                                break;
                            default:
                                jj_la1[37] = jj_gen;
                                ;
                        }
                        jj_consume_token(64);
                        break;
                    case 61:
                        jj_consume_token(61);
                        if (jj_2_23(1)) {
                            ParameterTypeList();
                        } else {
                            ;
                        }
                        jj_consume_token(62);
                        break;
                    default:
                        jj_la1[38] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            label_12:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 61:
                    case 63:
                        ;
                        break;
                    default:
                        jj_la1[39] = jj_gen;
                        break label_12;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 63:
                        jj_consume_token(63);
                        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                            case INTEGER_LITERAL:
                            case FLOATING_POINT_LITERAL:
                            case CHARACTER_LITERAL:
                            case STRING_LITERAL:
                            case SIZEOF:
                            case IDENTIFIER:
                            case 61:
                            case 65:
                            case 82:
                            case 91:
                            case 92:
                            case 95:
                            case 96:
                            case 97:
                            case 98:
                                ConstantExpression();
                                break;
                            default:
                                jj_la1[40] = jj_gen;
                                ;
                        }
                        jj_consume_token(64);
                        break;
                    case 61:
                        jj_consume_token(61);
                        if (jj_2_25(1)) {
                            ParameterTypeList();
                        } else {
                            ;
                        }
                        jj_consume_token(62);
                        break;
                    default:
                        jj_la1[41] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void TypedefName() throws ParseException {
                      /*@bgen(jjtree) TypedefName */
        ASTTypedefName jjtn000 = new ASTTypedefName(JJTTYPEDEFNAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IDENTIFIER);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
        ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_26(2)) {
                IdentifierStatement();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case CASE:
                        CaseStatement();
                        break;
                    case DFLT:
                        DefaultStatement();
                        break;
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case SIZEOF:
                    case IDENTIFIER:
                    case 55:
                    case 61:
                    case 65:
                    case 82:
                    case 91:
                    case 92:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                        ExpressionStatement();
                        break;
                    case 56:
                        CompoundStatement();
                        break;
                    case IF:
                        IfStatement();
                        break;
                    case SWITCH:
                        SwitchStatement();
                        break;
                    case WHILE:
                        WhileStatement();
                        break;
                    case DO:
                        DoStatement();
                        break;
                    case FOR:
                        ForStatement();
                        break;
                    case GOTO:
                        GotoStatement();
                        break;
                    case CONTINUE:
                        ContinueStatement();
                        break;
                    case BREAK:
                        BreakStatement();
                        break;
                    case RETURN:
                        ReturnStatement();
                        break;
                    default:
                        jj_la1[42] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void IdentifierStatement() throws ParseException {
                              /*@bgen(jjtree) IdentifierStatement */
        ASTIdentifierStatement jjtn000 = new ASTIdentifierStatement(JJTIDENTIFIERSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IDENTIFIER);
            jj_consume_token(60);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CaseStatement() throws ParseException {
                        /*@bgen(jjtree) CaseStatement */
        ASTCaseStatement jjtn000 = new ASTCaseStatement(JJTCASESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(CASE);
            CaseExpression();
            jj_consume_token(60);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CaseExpression() throws ParseException {
                         /*@bgen(jjtree) CaseExpression */
        ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ConstantExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DefaultStatement() throws ParseException {
                           /*@bgen(jjtree) DefaultStatement */
        ASTDefaultStatement jjtn000 = new ASTDefaultStatement(JJTDEFAULTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DFLT);
            jj_consume_token(60);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ExpressionStatement() throws ParseException {
                              /*@bgen(jjtree) ExpressionStatement */
        ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case SIZEOF:
                case IDENTIFIER:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    Expression();
                    break;
                default:
                    jj_la1[43] = jj_gen;
                    ;
            }
            jj_consume_token(55);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CompoundStatement() throws ParseException {
                            /*@bgen(jjtree) CompoundStatement */
        ASTCompoundStatement jjtn000 = new ASTCompoundStatement(JJTCOMPOUNDSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(56);
            if (jj_2_27(2147483647)) {
                DeclarationList();
            } else {
                ;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case CONTINUE:
                case DFLT:
                case SIZEOF:
                case SWITCH:
                case RETURN:
                case WHILE:
                case BREAK:
                case CASE:
                case GOTO:
                case FOR:
                case IF:
                case DO:
                case IDENTIFIER:
                case 55:
                case 56:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    StatementList();
                    break;
                default:
                    jj_la1[44] = jj_gen;
                    ;
            }
            jj_consume_token(57);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void StatementList() throws ParseException {
                        /*@bgen(jjtree) StatementList */
        ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            label_13:
            while (true) {
                Statement();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case CONTINUE:
                    case DFLT:
                    case SIZEOF:
                    case SWITCH:
                    case RETURN:
                    case WHILE:
                    case BREAK:
                    case CASE:
                    case GOTO:
                    case FOR:
                    case IF:
                    case DO:
                    case IDENTIFIER:
                    case 55:
                    case 56:
                    case 61:
                    case 65:
                    case 82:
                    case 91:
                    case 92:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                        ;
                        break;
                    default:
                        jj_la1[45] = jj_gen;
                        break label_13;
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void IfStatement() throws ParseException {
                     /*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(IF);
            jj_consume_token(61);
            BranchingExpression();
            jj_consume_token(62);
            Statement();
            if (jj_2_28(2)) {
                jj_consume_token(ELSE);
                Statement();
            } else {
                ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SwitchStatement() throws ParseException {
                          /*@bgen(jjtree) SwitchStatement */
        ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(SWITCH);
            jj_consume_token(61);
            SwitchExpression();
            jj_consume_token(62);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void SwitchExpression() throws ParseException {
                           /*@bgen(jjtree) SwitchExpression */
        ASTSwitchExpression jjtn000 = new ASTSwitchExpression(JJTSWITCHEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Expression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void WhileStatement() throws ParseException {
                         /*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(WHILE);
            jj_consume_token(61);
            BranchingExpression();
            jj_consume_token(62);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void DoStatement() throws ParseException {
                      /*@bgen(jjtree) DoStatement */
        ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(DO);
            Statement();
            jj_consume_token(WHILE);
            jj_consume_token(61);
            BranchingExpression();
            jj_consume_token(62);
            jj_consume_token(55);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ForStatement() throws ParseException {
                       /*@bgen(jjtree) ForStatement */
        ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(FOR);
            jj_consume_token(61);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case SIZEOF:
                case IDENTIFIER:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    Expression();
                    break;
                default:
                    jj_la1[46] = jj_gen;
                    ;
            }
            jj_consume_token(55);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case SIZEOF:
                case IDENTIFIER:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    BranchingExpression();
                    break;
                default:
                    jj_la1[47] = jj_gen;
                    ;
            }
            jj_consume_token(55);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case SIZEOF:
                case IDENTIFIER:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    Expression();
                    break;
                default:
                    jj_la1[48] = jj_gen;
                    ;
            }
            jj_consume_token(62);
            Statement();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void GotoStatement() throws ParseException {
                        /*@bgen(jjtree) GotoStatement */
        ASTGotoStatement jjtn000 = new ASTGotoStatement(JJTGOTOSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(GOTO);
            jj_consume_token(IDENTIFIER);
            jj_consume_token(55);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ContinueStatement() throws ParseException {
                            /*@bgen(jjtree) ContinueStatement */
        ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(CONTINUE);
            jj_consume_token(55);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void BreakStatement() throws ParseException {
                         /*@bgen(jjtree) BreakStatement */
        ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(BREAK);
            jj_consume_token(55);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ReturnStatement() throws ParseException {
                          /*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(RETURN);
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case SIZEOF:
                case IDENTIFIER:
                case 61:
                case 65:
                case 82:
                case 91:
                case 92:
                case 95:
                case 96:
                case 97:
                case 98:
                    Expression();
                    break;
                default:
                    jj_la1[49] = jj_gen;
                    ;
            }
            jj_consume_token(55);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void BranchingExpression() throws ParseException {
                              /*@bgen(jjtree) BranchingExpression */
        ASTBranchingExpression jjtn000 = new ASTBranchingExpression(JJTBRANCHINGEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            Expression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Expression() throws ParseException {
                     /*@bgen(jjtree) Expression */
        ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AssignmentExpression();
            label_14:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        ;
                        break;
                    default:
                        jj_la1[50] = jj_gen;
                        break label_14;
                }
                jj_consume_token(58);
                AssignmentExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AssignmentExpression() throws ParseException {
                               /*@bgen(jjtree) AssignmentExpression */
        ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_29(2147483647)) {
                UnaryExpression();
                AssignmentOperator();
                AssignmentExpression();
            } else if (jj_2_30(3)) {
                ConditionalExpression();
            } else {
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AssignmentOperator() throws ParseException {
                             /*@bgen(jjtree) AssignmentOperator */
        ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 59:
                    jj_consume_token(59);
                    break;
                case 67:
                    jj_consume_token(67);
                    break;
                case 68:
                    jj_consume_token(68);
                    break;
                case 69:
                    jj_consume_token(69);
                    break;
                case 70:
                    jj_consume_token(70);
                    break;
                case 71:
                    jj_consume_token(71);
                    break;
                case 72:
                    jj_consume_token(72);
                    break;
                case 73:
                    jj_consume_token(73);
                    break;
                case 74:
                    jj_consume_token(74);
                    break;
                case 75:
                    jj_consume_token(75);
                    break;
                case 76:
                    jj_consume_token(76);
                    break;
                default:
                    jj_la1[51] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConditionalExpression() throws ParseException {
                                /*@bgen(jjtree) ConditionalExpression */
        ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            LogicalORExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 77:
                    jj_consume_token(77);
                    Expression();
                    jj_consume_token(60);
                    ConditionalExpression();
                    break;
                default:
                    jj_la1[52] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ConstantExpression() throws ParseException {
                             /*@bgen(jjtree) ConstantExpression */
        ASTConstantExpression jjtn000 = new ASTConstantExpression(JJTCONSTANTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ConditionalExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LogicalORExpression() throws ParseException {
                              /*@bgen(jjtree) LogicalORExpression */
        ASTLogicalORExpression jjtn000 = new ASTLogicalORExpression(JJTLOGICALOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            LogicalANDExpression();
            label_15:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 78:
                        ;
                        break;
                    default:
                        jj_la1[53] = jj_gen;
                        break label_15;
                }
                jj_consume_token(78);
                LogicalANDExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LogicalANDExpression() throws ParseException {
                               /*@bgen(jjtree) LogicalANDExpression */
        ASTLogicalANDExpression jjtn000 = new ASTLogicalANDExpression(JJTLOGICALANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            InclusiveORExpression();
            label_16:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 79:
                        ;
                        break;
                    default:
                        jj_la1[54] = jj_gen;
                        break label_16;
                }
                jj_consume_token(79);
                InclusiveORExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void InclusiveORExpression() throws ParseException {
                                /*@bgen(jjtree) InclusiveORExpression */
        ASTInclusiveORExpression jjtn000 = new ASTInclusiveORExpression(JJTINCLUSIVEOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ExclusiveORExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 80:
                    jj_consume_token(80);
                    ExclusiveORExpression();
                    break;
                default:
                    jj_la1[55] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ExclusiveORExpression() throws ParseException {
                                /*@bgen(jjtree) ExclusiveORExpression */
        ASTExclusiveORExpression jjtn000 = new ASTExclusiveORExpression(JJTEXCLUSIVEOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ANDExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 81:
                    jj_consume_token(81);
                    ANDExpression();
                    break;
                default:
                    jj_la1[56] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ANDExpression() throws ParseException {
                        /*@bgen(jjtree) ANDExpression */
        ASTANDExpression jjtn000 = new ASTANDExpression(JJTANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            RelationalExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 82:
                    jj_consume_token(82);
                    RelationalExpression();
                    break;
                default:
                    jj_la1[57] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void RelationalExpression() throws ParseException {
                               /*@bgen(jjtree) RelationalExpression */
        ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            ShiftExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 83:
                case 84:
                case 85:
                case 86:
                case 87:
                case 88:
                    RelationalOperator();
                    ShiftExpression();
                    break;
                default:
                    jj_la1[58] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void RelationalOperator() throws ParseException {
                             /*@bgen(jjtree) RelationalOperator */
        ASTRelationalOperator jjtn000 = new ASTRelationalOperator(JJTRELATIONALOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 83:
                    jj_consume_token(83);
                    break;
                case 84:
                    jj_consume_token(84);
                    break;
                case 85:
                    jj_consume_token(85);
                    break;
                case 86:
                    jj_consume_token(86);
                    break;
                case 87:
                    jj_consume_token(87);
                    break;
                case 88:
                    jj_consume_token(88);
                    break;
                default:
                    jj_la1[59] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ShiftExpression() throws ParseException {
                          /*@bgen(jjtree) ShiftExpression */
        ASTShiftExpression jjtn000 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AdditiveExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 89:
                case 90:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 89:
                            jj_consume_token(89);
                            break;
                        case 90:
                            jj_consume_token(90);
                            break;
                        default:
                            jj_la1[60] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    ShiftExpression();
                    break;
                default:
                    jj_la1[61] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void AdditiveExpression() throws ParseException {
                             /*@bgen(jjtree) AdditiveExpression */
        ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            MultiplicativeExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 91:
                case 92:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 91:
                            jj_consume_token(91);
                            break;
                        case 92:
                            jj_consume_token(92);
                            break;
                        default:
                            jj_la1[62] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    AdditiveExpression();
                    break;
                default:
                    jj_la1[63] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void MultiplicativeExpression() throws ParseException {
                                   /*@bgen(jjtree) MultiplicativeExpression */
        ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            CastExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 65:
                case 93:
                case 94:
                    switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                        case 65:
                            jj_consume_token(65);
                            break;
                        case 93:
                            jj_consume_token(93);
                            break;
                        case 94:
                            jj_consume_token(94);
                            break;
                        default:
                            jj_la1[64] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                    MultiplicativeExpression();
                    break;
                default:
                    jj_la1[65] = jj_gen;
                    ;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void CastExpression() throws ParseException {
                         /*@bgen(jjtree) CastExpression */
        ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_31(2147483647)) {
                jj_consume_token(61);
                TypeName();
                jj_consume_token(62);
                CastExpression();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case INTEGER_LITERAL:
                    case FLOATING_POINT_LITERAL:
                    case CHARACTER_LITERAL:
                    case STRING_LITERAL:
                    case SIZEOF:
                    case IDENTIFIER:
                    case 61:
                    case 65:
                    case 82:
                    case 91:
                    case 92:
                    case 95:
                    case 96:
                    case 97:
                    case 98:
                        UnaryExpression();
                        break;
                    default:
                        jj_la1[66] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void UnaryExpression() throws ParseException {
                          /*@bgen(jjtree) UnaryExpression */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            if (jj_2_33(3)) {
                PostfixExpression();
            } else {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 95:
                        jj_consume_token(95);
                        UnaryExpression();
                        break;
                    case 96:
                        jj_consume_token(96);
                        UnaryExpression();
                        break;
                    case 65:
                    case 82:
                    case 91:
                    case 92:
                    case 97:
                        UnaryOperator();
                        CastExpression();
                        break;
                    case 98:
                        LogicalNOTExpression();
                        break;
                    case SIZEOF:
                        jj_consume_token(SIZEOF);
                        if (jj_2_32(2147483647)) {
                            UnaryExpression();
                        } else {
                            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                                case 61:
                                    jj_consume_token(61);
                                    TypeName();
                                    jj_consume_token(62);
                                    break;
                                default:
                                    jj_la1[67] = jj_gen;
                                    jj_consume_token(-1);
                                    throw new ParseException();
                            }
                        }
                        break;
                    default:
                        jj_la1[68] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void UnaryOperator() throws ParseException {
                        /*@bgen(jjtree) UnaryOperator */
        ASTUnaryOperator jjtn000 = new ASTUnaryOperator(JJTUNARYOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 82:
                    jj_consume_token(82);
                    break;
                case 65:
                    jj_consume_token(65);
                    break;
                case 91:
                    jj_consume_token(91);
                    break;
                case 92:
                    jj_consume_token(92);
                    break;
                case 97:
                    jj_consume_token(97);
                    break;
                default:
                    jj_la1[69] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void LogicalNOTExpression() throws ParseException {
                               /*@bgen(jjtree) LogicalNOTExpression */
        ASTLogicalNOTExpression jjtn000 = new ASTLogicalNOTExpression(JJTLOGICALNOTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            jj_consume_token(98);
            CastExpression();
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PostfixExpression() throws ParseException {
                            /*@bgen(jjtree) PostfixExpression */
        ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            PrimaryExpression();
            label_17:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 61:
                    case 63:
                    case 95:
                    case 96:
                    case 99:
                    case 100:
                        ;
                        break;
                    default:
                        jj_la1[70] = jj_gen;
                        break label_17;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 63:
                        jj_consume_token(63);
                        Expression();
                        jj_consume_token(64);
                        break;
                    case 61:
                        jj_consume_token(61);
                        if (jj_2_34(2147483647)) {
                            ArgumentExpressionList();
                        } else {
                            ;
                        }
                        jj_consume_token(62);
                        break;
                    case 99:
                        jj_consume_token(99);
                        jj_consume_token(IDENTIFIER);
                        break;
                    case 100:
                        jj_consume_token(100);
                        jj_consume_token(IDENTIFIER);
                        break;
                    case 95:
                        jj_consume_token(95);
                        break;
                    case 96:
                        jj_consume_token(96);
                        break;
                    default:
                        jj_la1[71] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void PrimaryExpression() throws ParseException {
                            /*@bgen(jjtree) PrimaryExpression */
        ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case IDENTIFIER:
                    jj_consume_token(IDENTIFIER);
                    break;
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                    Constant();
                    break;
                case 61:
                    jj_consume_token(61);
                    Expression();
                    jj_consume_token(62);
                    break;
                default:
                    jj_la1[72] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void ArgumentExpressionList() throws ParseException {
                                 /*@bgen(jjtree) ArgumentExpressionList */
        ASTArgumentExpressionList jjtn000 = new ASTArgumentExpressionList(JJTARGUMENTEXPRESSIONLIST);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            AssignmentExpression();
            label_18:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 58:
                        ;
                        break;
                    default:
                        jj_la1[73] = jj_gen;
                        break label_18;
                }
                jj_consume_token(58);
                AssignmentExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) throw (ParseException) jjte000;
                }
            }
            {
                if (true) throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    final public void Constant() throws ParseException {
                   /*@bgen(jjtree) Constant */
        ASTConstant jjtn000 = new ASTConstant(JJTCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case INTEGER_LITERAL:
                    jj_consume_token(INTEGER_LITERAL);
                    break;
                case FLOATING_POINT_LITERAL:
                    jj_consume_token(FLOATING_POINT_LITERAL);
                    break;
                case CHARACTER_LITERAL:
                    jj_consume_token(CHARACTER_LITERAL);
                    break;
                case STRING_LITERAL:
                    jj_consume_token(STRING_LITERAL);
                    break;
                default:
                    jj_la1[74] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
            }
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_2_16(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_16();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(15, xla);
        }
    }

    private boolean jj_2_17(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_17();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(16, xla);
        }
    }

    private boolean jj_2_18(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_18();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(17, xla);
        }
    }

    private boolean jj_2_19(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_19();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(18, xla);
        }
    }

    private boolean jj_2_20(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_20();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(19, xla);
        }
    }

    private boolean jj_2_21(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_21();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(20, xla);
        }
    }

    private boolean jj_2_22(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_22();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(21, xla);
        }
    }

    private boolean jj_2_23(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_23();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(22, xla);
        }
    }

    private boolean jj_2_24(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_24();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(23, xla);
        }
    }

    private boolean jj_2_25(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_25();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(24, xla);
        }
    }

    private boolean jj_2_26(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_26();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(25, xla);
        }
    }

    private boolean jj_2_27(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_27();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(26, xla);
        }
    }

    private boolean jj_2_28(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_28();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(27, xla);
        }
    }

    private boolean jj_2_29(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_29();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(28, xla);
        }
    }

    private boolean jj_2_30(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_30();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(29, xla);
        }
    }

    private boolean jj_2_31(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_31();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(30, xla);
        }
    }

    private boolean jj_2_32(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_32();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(31, xla);
        }
    }

    private boolean jj_2_33(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_33();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(32, xla);
        }
    }

    private boolean jj_2_34(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_34();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(33, xla);
        }
    }

    private boolean jj_3R_177() {
        if (jj_scan_token(63)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_182()) jj_scanpos = xsp;
        if (jj_scan_token(64)) return true;
        return false;
    }

    private boolean jj_3R_171() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_177()) {
            jj_scanpos = xsp;
            if (jj_3R_178()) return true;
        }
        return false;
    }

    private boolean jj_3_20() {
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3_24() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_34()) return true;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_111() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_24()) {
            jj_scanpos = xsp;
            if (jj_3R_149()) {
                jj_scanpos = xsp;
                if (jj_3R_150()) return true;
            }
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_171()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_21() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_32()) return true;
        return false;
    }

    private boolean jj_3R_110() {
        if (jj_3R_33()) return true;
        return false;
    }

    private boolean jj_3R_64() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_110()) jj_scanpos = xsp;
        if (jj_3R_111()) return true;
        return false;
    }

    private boolean jj_3_22() {
        if (jj_3R_33()) return true;
        return false;
    }

    private boolean jj_3R_34() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_22()) {
            jj_scanpos = xsp;
            if (jj_3R_64()) return true;
        }
        return false;
    }

    private boolean jj_3R_146() {
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_3R_27()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_85()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_173() {
        if (jj_scan_token(58)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3_19() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_31()) return true;
        return false;
    }

    private boolean jj_3R_179() {
        if (jj_3R_32()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_21()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(56)) return true;
        if (jj_3R_179()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(58)) jj_scanpos = xsp;
        if (jj_scan_token(57)) return true;
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_3R_90()) return true;
        return false;
    }

    private boolean jj_3R_32() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_60()) {
            jj_scanpos = xsp;
            if (jj_3R_61()) return true;
        }
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_3R_33()) return true;
        return false;
    }

    private boolean jj_3R_168() {
        if (jj_scan_token(58)) return true;
        if (jj_scan_token(66)) return true;
        return false;
    }

    private boolean jj_3R_167() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_173()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_22()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_146()) {
            jj_scanpos = xsp;
            if (jj_3R_147()) return true;
        }
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_3R_31()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_19()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_59()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_168()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_148() {
        if (jj_3R_97()) return true;
        return false;
    }

    private boolean jj_3R_62() {
        if (jj_3R_109()) return true;
        return false;
    }

    private boolean jj_3R_160() {
        if (jj_3R_167()) return true;
        return false;
    }

    private boolean jj_3R_109() {
        Token xsp;
        if (jj_3R_148()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_148()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_159() {
        if (jj_3R_166()) return true;
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(65)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_62()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_63()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_145() {
        if (jj_scan_token(61)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_160()) jj_scanpos = xsp;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3_18() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_30()) return true;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_144() {
        if (jj_scan_token(63)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_159()) jj_scanpos = xsp;
        if (jj_scan_token(64)) return true;
        return false;
    }

    private boolean jj_3R_107() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_144()) {
            jj_scanpos = xsp;
            if (jj_3_18()) {
                jj_scanpos = xsp;
                if (jj_3R_145()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_106() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_28()) return true;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_172() {
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3R_165() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_172()) jj_scanpos = xsp;
        if (jj_scan_token(60)) return true;
        if (jj_3R_166()) return true;
        return false;
    }

    private boolean jj_3R_108() {
        if (jj_scan_token(59)) return true;
        if (jj_3R_166()) return true;
        return false;
    }

    private boolean jj_3R_105() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_56() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_105()) {
            jj_scanpos = xsp;
            if (jj_3R_106()) return true;
        }
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_107()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_57()) return true;
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_3R_33()) return true;
        return false;
    }

    private boolean jj_3R_28() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_55()) jj_scanpos = xsp;
        if (jj_3R_56()) return true;
        return false;
    }

    private boolean jj_3_14() {
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_195() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_158()) return true;
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_scan_token(IDENTIFIER)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_108()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_17() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(52)) jj_scanpos = xsp;
        if (jj_scan_token(56)) return true;
        if (jj_3R_29()) return true;
        if (jj_scan_token(57)) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_57()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_58()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_104() {
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_103() {
        if (jj_3R_27()) return true;
        return false;
    }

    private boolean jj_3R_101() {
        if (jj_scan_token(ENUM)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_17()) {
            jj_scanpos = xsp;
            if (jj_scan_token(52)) return true;
        }
        return false;
    }

    private boolean jj_3_16() {
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3R_158() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_16()) {
            jj_scanpos = xsp;
            if (jj_3R_165()) return true;
        }
        return false;
    }

    private boolean jj_3R_143() {
        if (jj_3R_158()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_195()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_157() {
        if (jj_scan_token(59)) return true;
        if (jj_3R_32()) return true;
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_97()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_104()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_127() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_40()) return true;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_27() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_15()) {
            jj_scanpos = xsp;
            if (jj_3R_54()) return true;
        }
        return false;
    }

    private boolean jj_3_15() {
        if (jj_3R_24()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_103()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_141() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_140()) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_27()) return true;
        if (jj_3R_143()) return true;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_91() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_90()) return true;
        return false;
    }

    private boolean jj_3_34() {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3R_140() {
        if (jj_3R_28()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_157()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_3R_101()) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_139() {
        if (jj_scan_token(TYPEDEF)) return true;
        return false;
    }

    private boolean jj_3R_155() {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3R_99() {
        if (jj_3R_140()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_141()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_11() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(52)) jj_scanpos = xsp;
        if (jj_scan_token(56)) return true;
        if (jj_3R_25()) return true;
        if (jj_scan_token(57)) return true;
        return false;
    }

    private boolean jj_3R_136() {
        if (jj_scan_token(100)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_135() {
        if (jj_scan_token(99)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_134() {
        if (jj_scan_token(61)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_155()) jj_scanpos = xsp;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3_12() {
        if (jj_3R_26()) return true;
        return false;
    }

    private boolean jj_3R_133() {
        if (jj_scan_token(63)) return true;
        if (jj_3R_130()) return true;
        if (jj_scan_token(64)) return true;
        return false;
    }

    private boolean jj_3R_25() {
        Token xsp;
        if (jj_3_12()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_12()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_89() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_133()) {
            jj_scanpos = xsp;
            if (jj_3R_134()) {
                jj_scanpos = xsp;
                if (jj_3R_135()) {
                    jj_scanpos = xsp;
                    if (jj_3R_136()) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(95)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(96)) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_154() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(12)) {
            jj_scanpos = xsp;
            if (jj_scan_token(16)) {
                jj_scanpos = xsp;
                if (jj_scan_token(18)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(19)) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_142() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(31)) {
            jj_scanpos = xsp;
            if (jj_scan_token(36)) return true;
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_3R_90()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_91()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_132() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_130()) return true;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_131() {
        if (jj_3R_154()) return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3_32() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3R_88() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(52)) {
            jj_scanpos = xsp;
            if (jj_3R_131()) {
                jj_scanpos = xsp;
                if (jj_3R_132()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_3R_100()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_100() {
        if (jj_3R_142()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_11()) {
            jj_scanpos = xsp;
            if (jj_scan_token(52)) return true;
        }
        return false;
    }

    private boolean jj_3R_95() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_126() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_3R_88()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_89()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_97() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(37)) {
            jj_scanpos = xsp;
            if (jj_scan_token(21)) return true;
        }
        return false;
    }

    private boolean jj_3R_98() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_125() {
        if (jj_scan_token(98)) return true;
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_96() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_124() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(82)) {
            jj_scanpos = xsp;
            if (jj_scan_token(65)) {
                jj_scanpos = xsp;
                if (jj_scan_token(91)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(92)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(97)) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_194() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(91)) {
            jj_scanpos = xsp;
            if (jj_scan_token(92)) return true;
        }
        if (jj_3R_190()) return true;
        return false;
    }

    private boolean jj_3R_24() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(45)) {
            jj_scanpos = xsp;
            if (jj_scan_token(46)) {
                jj_scanpos = xsp;
                if (jj_scan_token(39)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(49)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(42)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(38)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(26)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(33)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(23)) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_51()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_52()) {
                                                    jj_scanpos = xsp;
                                                    jj_lookingAhead = true;
                                                    jj_semLA = isType(getToken(1).image);
                                                    jj_lookingAhead = false;
                                                    if (!jj_semLA || jj_3R_53()) return true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_3R_99()) return true;
        return false;
    }

    private boolean jj_3R_82() {
        if (jj_scan_token(SIZEOF)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_126()) {
            jj_scanpos = xsp;
            if (jj_3R_127()) return true;
        }
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_3R_125()) return true;
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_3R_124()) return true;
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_196() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(65)) {
            jj_scanpos = xsp;
            if (jj_scan_token(93)) {
                jj_scanpos = xsp;
                if (jj_scan_token(94)) return true;
            }
        }
        if (jj_3R_193()) return true;
        return false;
    }

    private boolean jj_3R_79() {
        if (jj_scan_token(96)) return true;
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(95)) return true;
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3_31() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_40()) return true;
        if (jj_scan_token(62)) return true;
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3_33() {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_94() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(44)) {
            jj_scanpos = xsp;
            if (jj_scan_token(22)) {
                jj_scanpos = xsp;
                if (jj_scan_token(32)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(30)) {
                        jj_scanpos = xsp;
                        if (jj_3R_139()) return true;
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_37() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_33()) {
            jj_scanpos = xsp;
            if (jj_3R_78()) {
                jj_scanpos = xsp;
                if (jj_3R_79()) {
                    jj_scanpos = xsp;
                    if (jj_3R_80()) {
                        jj_scanpos = xsp;
                        if (jj_3R_81()) {
                            jj_scanpos = xsp;
                            if (jj_3R_82()) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_191() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(89)) {
            jj_scanpos = xsp;
            if (jj_scan_token(90)) return true;
        }
        if (jj_3R_180()) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_3R_97()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_98()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_24()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_96()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_3R_94()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_95()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_47()) {
            jj_scanpos = xsp;
            if (jj_3_10()) {
                jj_scanpos = xsp;
                if (jj_3R_48()) return true;
            }
        }
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_40()) return true;
        if (jj_scan_token(62)) return true;
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_41() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_86()) {
            jj_scanpos = xsp;
            if (jj_3R_87()) return true;
        }
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_181() {
        if (jj_3R_192()) return true;
        if (jj_3R_180()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        Token xsp;
        if (jj_3R_49()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_49()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_193() {
        if (jj_3R_41()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_196()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_175() {
        if (jj_scan_token(82)) return true;
        if (jj_3R_174()) return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_21() {
        if (jj_3R_22()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_50()) jj_scanpos = xsp;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_190() {
        if (jj_3R_193()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_194()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_163() {
        if (jj_scan_token(80)) return true;
        if (jj_3R_162()) return true;
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_180() {
        if (jj_3R_190()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_191()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_20() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_45()) jj_scanpos = xsp;
        if (jj_3R_28()) return true;
        xsp = jj_scanpos;
        if (jj_3_5()) jj_scanpos = xsp;
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3R_192() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(83)) {
            jj_scanpos = xsp;
            if (jj_scan_token(84)) {
                jj_scanpos = xsp;
                if (jj_scan_token(85)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(86)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(87)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(88)) return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_170() {
        if (jj_scan_token(81)) return true;
        if (jj_3R_169()) return true;
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_153() {
        if (jj_scan_token(79)) return true;
        if (jj_3R_152()) return true;
        return false;
    }

    private boolean jj_3R_19() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3_3()) return true;
        }
        return false;
    }

    private boolean jj_3R_174() {
        if (jj_3R_180()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_181()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_129() {
        if (jj_scan_token(78)) return true;
        if (jj_3R_128()) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_19()) return true;
        return false;
    }

    private boolean jj_3R_169() {
        if (jj_3R_174()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_175()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_162() {
        if (jj_3R_169()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_170()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_84() {
        if (jj_scan_token(77)) return true;
        if (jj_3R_130()) return true;
        if (jj_scan_token(60)) return true;
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3R_152() {
        if (jj_3R_162()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_163()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_128() {
        if (jj_3R_152()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_153()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_3R_128()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_129()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_164() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_90()) return true;
        return false;
    }

    private boolean jj_3R_166() {
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3_29() {
        if (jj_3R_37()) return true;
        if (jj_3R_38()) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_3R_83()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_84()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_38() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_scan_token(59)) {
            jj_scanpos = xsp;
            if (jj_scan_token(67)) {
                jj_scanpos = xsp;
                if (jj_scan_token(68)) {
                    jj_scanpos = xsp;
                    if (jj_scan_token(69)) {
                        jj_scanpos = xsp;
                        if (jj_scan_token(70)) {
                            jj_scanpos = xsp;
                            if (jj_scan_token(71)) {
                                jj_scanpos = xsp;
                                if (jj_scan_token(72)) {
                                    jj_scanpos = xsp;
                                    if (jj_scan_token(73)) {
                                        jj_scanpos = xsp;
                                        if (jj_scan_token(74)) {
                                            jj_scanpos = xsp;
                                            if (jj_scan_token(75)) {
                                                jj_scanpos = xsp;
                                                if (jj_scan_token(76)) return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3_30() {
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3R_137() {
        if (jj_3R_37()) return true;
        if (jj_3R_38()) return true;
        if (jj_3R_90()) return true;
        return false;
    }

    private boolean jj_3R_90() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_137()) {
            jj_scanpos = xsp;
            if (jj_3_30()) return true;
        }
        return false;
    }

    private boolean jj_3R_189() {
        if (jj_3R_130()) return true;
        return false;
    }

    private boolean jj_3R_130() {
        if (jj_3R_90()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_164()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_184() {
        if (jj_3R_130()) return true;
        return false;
    }

    private boolean jj_3_28() {
        if (jj_scan_token(ELSE)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_123() {
        if (jj_scan_token(RETURN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_189()) jj_scanpos = xsp;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_122() {
        if (jj_scan_token(BREAK)) return true;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_188() {
        if (jj_3R_130()) return true;
        return false;
    }

    private boolean jj_3R_187() {
        if (jj_3R_184()) return true;
        return false;
    }

    private boolean jj_3R_186() {
        if (jj_3R_130()) return true;
        return false;
    }

    private boolean jj_3R_121() {
        if (jj_scan_token(CONTINUE)) return true;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_120() {
        if (jj_scan_token(GOTO)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_119() {
        if (jj_scan_token(FOR)) return true;
        if (jj_scan_token(61)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_186()) jj_scanpos = xsp;
        if (jj_scan_token(55)) return true;
        xsp = jj_scanpos;
        if (jj_3R_187()) jj_scanpos = xsp;
        if (jj_scan_token(55)) return true;
        xsp = jj_scanpos;
        if (jj_3R_188()) jj_scanpos = xsp;
        if (jj_scan_token(62)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_118() {
        if (jj_scan_token(DO)) return true;
        if (jj_3R_36()) return true;
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(61)) return true;
        if (jj_3R_184()) return true;
        if (jj_scan_token(62)) return true;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3R_117() {
        if (jj_scan_token(WHILE)) return true;
        if (jj_scan_token(61)) return true;
        if (jj_3R_184()) return true;
        if (jj_scan_token(62)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_185() {
        if (jj_3R_130()) return true;
        return false;
    }

    private boolean jj_3R_116() {
        if (jj_scan_token(SWITCH)) return true;
        if (jj_scan_token(61)) return true;
        if (jj_3R_185()) return true;
        if (jj_scan_token(62)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3_27() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_115() {
        if (jj_scan_token(IF)) return true;
        if (jj_scan_token(61)) return true;
        if (jj_3R_184()) return true;
        if (jj_scan_token(62)) return true;
        if (jj_3R_36()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_28()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_156() {
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_138() {
        Token xsp;
        if (jj_3R_156()) return true;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_156()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_93() {
        if (jj_3R_138()) return true;
        return false;
    }

    private boolean jj_3R_92() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(56)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_92()) jj_scanpos = xsp;
        xsp = jj_scanpos;
        if (jj_3R_93()) jj_scanpos = xsp;
        if (jj_scan_token(57)) return true;
        return false;
    }

    private boolean jj_3R_151() {
        if (jj_3R_130()) return true;
        return false;
    }

    private boolean jj_3R_114() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_151()) jj_scanpos = xsp;
        if (jj_scan_token(55)) return true;
        return false;
    }

    private boolean jj_3_25() {
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_113() {
        if (jj_scan_token(DFLT)) return true;
        if (jj_scan_token(60)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_183() {
        if (jj_3R_166()) return true;
        return false;
    }

    private boolean jj_3R_178() {
        if (jj_scan_token(61)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_25()) jj_scanpos = xsp;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_112() {
        if (jj_scan_token(CASE)) return true;
        if (jj_3R_183()) return true;
        if (jj_scan_token(60)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_161() {
        if (jj_3R_34()) return true;
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(60)) return true;
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_147() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_161()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_77() {
        if (jj_3R_123()) return true;
        return false;
    }

    private boolean jj_3R_76() {
        if (jj_3R_122()) return true;
        return false;
    }

    private boolean jj_3R_75() {
        if (jj_3R_121()) return true;
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_3R_120()) return true;
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_3R_119()) return true;
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_3R_117()) return true;
        return false;
    }

    private boolean jj_3_23() {
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_3R_116()) return true;
        return false;
    }

    private boolean jj_3R_176() {
        if (jj_3R_166()) return true;
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_3R_115()) return true;
        return false;
    }

    private boolean jj_3R_68() {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_3R_114()) return true;
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_3R_113()) return true;
        return false;
    }

    private boolean jj_3R_150() {
        if (jj_scan_token(61)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_23()) jj_scanpos = xsp;
        if (jj_scan_token(62)) return true;
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_149() {
        if (jj_scan_token(63)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_176()) jj_scanpos = xsp;
        if (jj_scan_token(64)) return true;
        return false;
    }

    private boolean jj_3_26() {
        if (jj_3R_35()) return true;
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_3R_34()) return true;
        return false;
    }

    private boolean jj_3R_182() {
        if (jj_3R_166()) return true;
        return false;
    }

    private boolean jj_3R_36() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_26()) {
            jj_scanpos = xsp;
            if (jj_3R_65()) {
                jj_scanpos = xsp;
                if (jj_3R_66()) {
                    jj_scanpos = xsp;
                    if (jj_3R_67()) {
                        jj_scanpos = xsp;
                        if (jj_3R_68()) {
                            jj_scanpos = xsp;
                            if (jj_3R_69()) {
                                jj_scanpos = xsp;
                                if (jj_3R_70()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_71()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_72()) {
                                            jj_scanpos = xsp;
                                            if (jj_3R_73()) {
                                                jj_scanpos = xsp;
                                                if (jj_3R_74()) {
                                                    jj_scanpos = xsp;
                                                    if (jj_3R_75()) {
                                                        jj_scanpos = xsp;
                                                        if (jj_3R_76()) {
                                                            jj_scanpos = xsp;
                                                            if (jj_3R_77()) return true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_102() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 75; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 75; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(CParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 75; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[101];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 75; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                    if ((jj_la1_3[i] & (1 << j)) != 0) {
                        la1tokens[96 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 101; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 34; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                            case 15:
                                jj_3_16();
                                break;
                            case 16:
                                jj_3_17();
                                break;
                            case 17:
                                jj_3_18();
                                break;
                            case 18:
                                jj_3_19();
                                break;
                            case 19:
                                jj_3_20();
                                break;
                            case 20:
                                jj_3_21();
                                break;
                            case 21:
                                jj_3_22();
                                break;
                            case 22:
                                jj_3_23();
                                break;
                            case 23:
                                jj_3_24();
                                break;
                            case 24:
                                jj_3_25();
                                break;
                            case 25:
                                jj_3_26();
                                break;
                            case 26:
                                jj_3_27();
                                break;
                            case 27:
                                jj_3_28();
                                break;
                            case 28:
                                jj_3_29();
                                break;
                            case 29:
                                jj_3_30();
                                break;
                            case 30:
                                jj_3_31();
                                break;
                            case 31:
                                jj_3_32();
                                break;
                            case 32:
                                jj_3_33();
                                break;
                            case 33:
                                jj_3_34();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
